@page "/login"
@using System.Security.Claims
@using LunchSplitter.Data
@using LunchSplitter.Models.ViewModels
@using LunchSplitter.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject UserService userService
@inject NavigationManager NavigationManager


<h3>Login</h3>

<div class="row">
    <EditForm Model="@Model" OnValidSubmit="Authenicate" FormName="LoginForm">
        <DataAnnotationsValidator />
        
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="@Model.Username" />
            <ValidationMessage For="@(() => Model.Username)" />
        </div>
        
        <div class="form-group">
            <label for="password">Password</label>
            <InputText type="password" id="password" class="form-control" @bind-Value="@Model.Password"  />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>  
        
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; }

    private string? errorMessage;

    protected override void OnInitialized()
    {
        Model ??= new();
    }

    private void signup()
    {
        NavigationManager.NavigateTo("/signup");
    }
    
    
    private async Task Authenicate()
    {
        var user = userService.GetUserByUsername(Model.Username);
        var hashedPassword = UserService.HashPassword(Model.Password, user.Salt);
        if (user == null || UserService.CompareHash(Model.Password, user.Password, user.Salt) == false)
        {
            errorMessage = "Invalid username or password";
            return;
        }
        
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, user.Name),
            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString())
        };
        
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        
        NavigationManager.NavigateTo("/");
    }
}