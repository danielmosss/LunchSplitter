@page "/invite/{inviteId}"
@using System.Security.Claims
@using LunchSplitter.Domain.Entity
@using LunchSplitter.Services
@rendermode InteractiveServer
@inject GroupService groupService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<h1>
    <Spinner Color="SpinnerColor.Primary" />
    Using invite...
</h1>
<h5>
    If you are not redirected, click <a href="/">here</a>.
</h5>

@code {
    [Parameter] public string inviteId { get; set; }
    
    protected override void OnInitialized()
    {
        var invite = new GroupInvite();
        try
        {
            invite = groupService.GetInvite(Guid.Parse(inviteId));
        }
        catch
        {
            invite = null;
        }

        if (invite != null)
        {
            groupService.UseInvite(invite.Id, GetUserId());
            Task.Delay(5000).ContinueWith(t => navigationManager.NavigateTo($"/group/{invite.GroupId}"));
        }
        else
        {
            Task.Delay(5000).ContinueWith(t => navigationManager.NavigateTo("/error"));
        }
    }

    private int GetUserId()
    {
        var authState = authenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        if (user.Identity?.IsAuthenticated != true)
        {
            navigationManager.NavigateTo("/login");
            throw new Exception("User is not authenticated");
        }
        return int.Parse(user.FindFirstValue(ClaimTypes.NameIdentifier));
    }

}