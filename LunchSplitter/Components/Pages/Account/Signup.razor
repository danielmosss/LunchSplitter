@page "/signup"
@using LunchSplitter.Models.ViewModels
@using LunchSplitter.Services
@inject UserService userService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<h3>Signup</h3>

<div class="row">
    <EditForm Model="@Model" OnValidSubmit="SignupForm" FormName="SignupForm">
        <DataAnnotationsValidator/>

        <div class="form-group
        ">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="@Model.Username"/>
            <ValidationMessage For="@(() => Model.Username)"/>
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="@Model.Password"/>
            <ValidationMessage For="@(() => Model.Password)"/>
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="@Model.Email"/>
            <ValidationMessage For="@(() => Model.Email)"/>
        </div>

        @if (!string.IsNullOrWhiteSpace(_errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @_errorMessage
            </div>
        }

        <button type="submit" class="btn btn-primary">Signup</button>

    </EditForm>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    [SupplyParameterFromForm]
    public SignupViewModel Model { get; set; } = new();
    
    private string _errorMessage = string.Empty;

    private async Task SignupForm()
    {
        var user = userService.GetUserByUsername(Model.Username);
        if (user != null)
        {
            _errorMessage = "Username already exists";
            return;
        }
        
        userService.AddUser(Model);
        navigationManager.NavigateTo("/login");
    }
}