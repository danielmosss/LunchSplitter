@page "/transactions"
@using LunchSplitter.Domain.Entity
@using LunchSplitter.Services
@attribute [StreamRendering]
@attribute [Authorize]
@inject TransactionService transactionService

<PageTitle>Transactions</PageTitle>

<h1>Transactions</h1>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Shared</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var tx in transactions)
        {
            <tr>
                <td>@tx.User.Name</td>
                <td>@tx.Amount</td>
                <td>@tx.Date</td>
                <td class="sharedTable">
                    @foreach (var shared in @transactionService.GetTransactionShares(@tx.Id))
                    {
                        <span>(@shared.UserName -€@shared.Amount)</span>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int GroupId { get; set; }
    
    private WeatherForecast[]? forecasts;
    
    private List<Transaction>? transactions;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        transactions = await transactionService.GetTransactions(GroupId);
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}