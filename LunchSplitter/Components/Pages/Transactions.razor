@page "/transactions"
@using LunchSplitter.Domain.Entity
@using LunchSplitter.Services
@attribute [StreamRendering]
@attribute [Authorize]
@inject TransactionService transactionService

<PageTitle>Transactions</PageTitle>

<h3>Last 25 transactions</h3>

@if (transactions == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="transactions">
        <table class="table">
            <thead>
            <tr>
                <th>User</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Shared</th>
                @if (IsGroupAdmin)
                {
                    <th>Delete</th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var tx in transactions)
            {
                <tr>
                    <td>@tx.User.Name</td>
                    <td>@tx.Description</td>
                    <td>@tx.Amount</td>
                    <td>@tx.Date</td>
                    <td class="sharedTable">
                        @foreach (var shared in @transactionService.GetTransactionShares(@tx.Id))
                        {
                            <span>(@shared.UserName -€@shared.Amount)</span>
                        }
                    </td>
                    @if (IsGroupAdmin)
                    {
                        <td>

                            <button class="btn btn-danger" @onclick="() => DeleteTransaction(tx.Id)">
                                <span class="bi bi-trash"></span>
                            </button>
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter] public int GroupId { get; set; }

    [Parameter] public bool IsGroupAdmin { get; set; }

    private List<Transaction>? transactions;
    private bool isPopupVisible = false;

    protected override async Task OnInitializedAsync()
    {
        transactions = await transactionService.GetTransactions(GroupId);
    }

    private void DeleteTransaction(int transactionId)
    {
        transactionService.DeleteTransaction(transactionId);
        transactions = transactions.Where(tx => tx.Id != transactionId).ToList();
    }
}