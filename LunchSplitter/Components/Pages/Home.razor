@page "/"
@using System.Security.Claims
@using LunchSplitter.Domain.Entity
@using LunchSplitter.Services
@rendermode InteractiveServer
@inject GroupService groupService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

<PageTitle>Home</PageTitle>

<div>
    <h2>Welcome to LunchSplitter</h2>
    <p>
        Split your lunch bill with your friends!<br/>
        Create a group or use an <strong>invitelink</strong> to join a group.
    </p>
</div>

<AuthorizeView>
    <Authorized>
        <div class="groups">
            @foreach (var group in groupService.GetGroupsByUserId(GetUserId()))
            {
                <button class="btn btn-primary buttonGroup" @onclick="() => NavigateToGroup(group.Id)">
                    @group.Name
                    <i class="bi bi-box-arrow-up-right"></i>
                </button>
            }
            <div class="group">
                <EditForm Model="NewGroup" OnValidSubmit="HandleSubmit" FormName="CreateGroup" Context="another_name">
                    <DataAnnotationsValidator/>

                    <div class="form-group">
                        <label for="NameInput">Name</label>
                        <InputText id="NameInput" class="form-control" @bind-Value="NewGroup.Name"/>
                        <ValidationMessage For="@(() => NewGroup.Name)"/>
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div>
            <NavLink href="login" class="btn btn-primary">Login</NavLink>
            <NavLink href="signup" class="btn btn-primary">Signup</NavLink>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code
{
    [SupplyParameterFromForm] public Group NewGroup { get; set; }

    protected override void OnInitialized()
    {
        NewGroup ??= new();
    }

    private int GetUserId()
    {
        var authState = authenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        if (user.Identity?.IsAuthenticated != true)
        {
            navigationManager.NavigateTo("/login");
            throw new Exception("User is not authenticated");
        }

        return int.Parse(user.FindFirstValue(ClaimTypes.NameIdentifier));
    }

    private void NavigateToGroup(int groupId)
    {
        navigationManager.NavigateTo($"/group/{groupId}");
    }

    private async void HandleSubmit()
    {
        groupService.AddGroup(NewGroup, GetUserId());

        NewGroup = new Group();
        await Task.Delay(500);
        navigationManager.NavigateTo("/", true);
    }
}