@page "/group/{groupId}"
@using System.Security.Claims
@using System.Text.RegularExpressions
@using LunchSplitter.Domain.Entity
@rendermode InteractiveServer
@using LunchSplitter.Services
@using Group = LunchSplitter.Domain.Entity.Group
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject GroupService groupService
@inject TransactionService transactionService

<PageTitle>Group</PageTitle>

<h3>Group, @group.Name</h3>

@if(IsGroupAdmin)
{
    <div class="groupActions">
        <button class="btn btn-primary" @onclick="() => DeleteGroup()">
            <span class="bi bi-trash"></span>
            Delete Group
        </button>
    </div>
}

<div class="GroupTopRow">
    <div class="users">
        <h4>Users</h4>
        <table>
            <tr>
                <th>User</th>
                <th>IsAdmin</th>
                <th>Share</th>
            </tr>
            @foreach (var groupUser in group.GroupUsers)
            {
                <tr>
                    <td>@groupUser.User.Name</td>
                    <td>@groupUser.IsAdmin</td>
                    <td>
                        @groupUser.Share
                        (@GetSharePercentage(groupUser.Share, group)%)
                    </td>
                </tr>
            }
        </table>
    </div>


    <div class="newTransaction">
        <h4>Add New Transaction</h4>
        <EditForm Model="@newTransaction" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
        
            <div class="form-group">
                <label for="amount">Amount</label>
                <InputNumber id="amount" class="form-control" @bind-Value="newTransaction.Amount"/>
                <ValidationMessage For="@(() => newTransaction.Amount)"/>
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <InputText id="description" class="form-control" @bind-Value="newTransaction.Description"/>
                <ValidationMessage For="@(() => newTransaction.Description)"/>
            </div>
            <div class="form-group">
                <label for="date">Date</label>
                <InputDate id="date" class="form-control" @bind-Value="newTransaction.Date"/>
                <ValidationMessage For="@(() => newTransaction.Date)"/>
            </div>
            <div class="form-group">
                <label for="shareOption">Share Option</label>
                <InputSelect id="shareOption" class="form-control" @bind-Value="shareOption">
                    <option value="default">Default Group Preset</option>
                    <option value="equal">Equally</option>
                    @* <option value="custom">Custom</option> *@
                </InputSelect>
            </div>
            @* @if (shareOption == "custom") *@
            @* { *@
            @*     <div class="form-group"> *@
            @*         @foreach (var groupUser in group.GroupUsers) *@
            @*         { *@
            @*             <label>@groupUser.User.Name</label> *@
            @*             <InputNumber class="form-control" @bind-Value="customShares[groupUser.UserId]"/> *@
            @*         } *@
            @*     </div> *@
            @* } *@
            <button type="submit" class="btn btn-primary">Add Transaction</button>
        </EditForm>
    </div>
</div>

<Transactions GroupId="@group.Id"></Transactions>

@code {
    [Parameter] public string groupId { get; set; }
    [CascadingParameter] public HttpContext? HttpContext { get; set; }

    public Group group { get; set; }
    public bool IsGroupAdmin { get; set; }
    
    [SupplyParameterFromForm] public Transaction newTransaction { get; set; }
    private string shareOption = "default";
    private Dictionary<int, decimal> customShares = new Dictionary<int, decimal>();

    protected override void OnInitialized()
    {
        newTransaction ??= new Transaction { Date = DateTime.Now };
        try
        {
            group = groupService.GetGroupById(int.Parse(groupId));
            if (group == null)
            {
                navigationManager.NavigateTo("/error");
            }
            IsGroupAdmin = UserGroupAdmin().Result;
            InitializeCustomShares();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing component: {ex.Message}");
            navigationManager.NavigateTo("/error");
        }
    }
    
    private void InitializeCustomShares()
    {
        foreach (var groupUser in group.GroupUsers)
        {
            customShares[groupUser.UserId] = 0;
        }
    }

    private void DeleteGroup()
    {
        try
        {
            groupService.DeleteGroup(group.Id);
            StateHasChanged();
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            // Log the exception or handle it as needed
            Console.WriteLine($"Failed to delete group: {ex.Message}");
            // Consider providing user feedback here as well
        }
    }
    
    private double GetSharePercentage(double share, Group group)
    {
        return Math.Round(share / group.GroupUsers.Sum(gu => gu.Share) * 100, 2);
    }

    private async Task<bool> UserGroupAdmin()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        var groupUser = group.GroupUsers.FirstOrDefault(gu => gu.UserId == int.Parse(userId));
        return groupUser != null && groupUser.IsAdmin;
    }

    private int GetUserId()
    {
        var authState = authenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        return int.Parse(user.FindFirstValue(ClaimTypes.NameIdentifier));
    }
    
    private string GetUsername()
    {
        var authState = authenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        return user.FindFirstValue(ClaimTypes.Name);
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            if (shareOption == "equal")
            {
                decimal equalShare = Math.Round(newTransaction.Amount / group.GroupUsers.Count, 2);
                foreach (var groupUser in group.GroupUsers)
                {
                    customShares[groupUser.UserId] = equalShare;
                }
            }
            else if (shareOption == "default")
            {
                foreach (var groupUser in group.GroupUsers)
                {
                    customShares[groupUser.UserId] = groupUser.Share;
                }
            }
            
             newTransaction.GroupId = group.Id;
             newTransaction.UserId = GetUserId();
             
            await transactionService.AddTransaction(newTransaction, customShares, group);
            StateHasChanged();
            navigationManager.NavigateTo($"/group/{group.Id}", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
    }
}