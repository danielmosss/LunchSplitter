@page "/group/{groupId}"
@using System.Security.Claims
@using LunchSplitter.Domain.Entity
@rendermode InteractiveServer
@using LunchSplitter.Services
@using Group = LunchSplitter.Domain.Entity.Group
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject GroupService groupService
@inject TransactionService transactionService

<PageTitle>Group</PageTitle>


<div style="display: flex; gap: 10px">
    <h3>@group.Name</h3>

    @if (IsGroupAdmin)
    {
        <div class="groupActions">

            <button class="btn btn-primary" @onclick="() => showConfirmDelete = !showConfirmDelete">
                <span class="bi bi-trash"></span>
                Delete Group
            </button>

            @if (showConfirmDelete)
            {
                <button class="btn btn-danger" @onclick="() => DeleteGroup()">
                    Confirm Delete Group
                </button>
            }
        </div>
    }
</div>

<div class="GroupTopRow">
    <div class="users backgroundBlock">
        <h4>Users</h4>
        <table>
            <tr>
                <th>User</th>
                <th>Share</th>
                <th>Total Paid</th>
                <th>Total Spent</th>
                <th>Balance</th>
            </tr>
            @foreach (var groupUser in group.GroupUsers)
            {
                <tr>
                    <td>
                        @if (groupUser.IsAdmin)
                        {
                            <strong>
                                @groupUser.User.Name
                            </strong>
                        }
                        else
                        {
                            @groupUser.User.Name
                        }
                    </td>
                    <td>
                        @groupUser.Share
                        (@GetSharePercentage(groupUser.Share, group)%)
                    </td>

                    @{ var user = GetUserTotalAmount(groupUser.UserId); }
                    <td>@user.TotalPaid (@user.TransactionsPaid TX)</td>
                    <td>@user.TotalSpent (@user.TransactionsSpent TX)</td>
                    <td>@(@user.TotalPaid - @user.TotalSpent)</td>
                </tr>
            }
        </table>
    </div>

    @if (IsGroupAdmin)
    {
        <div class="updateShare backgroundBlock">
            <h4>Update Share</h4>
            <EditForm Model="@selectedUser" OnValidSubmit="UpdateShare">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label for="userSelect">Select User</label>
                    <InputSelect id="userSelect" class="form-control" @bind-Value="selectedUser.UserId" @oninput="UpdateSelectedUser">
                        @foreach (var groupUser in group.GroupUsers)
                        {
                            <option value="@groupUser.UserId">@groupUser.User.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="newShare">New Share</label>
                    <InputNumber id="newShare" class="form-control" @bind-Value="selectedUser.Share"/>
                    <ValidationMessage For="@(() => selectedUser.Share)"/>
                </div>

                <div class="form-group form-check">
                    <InputCheckbox id="isAdmin" class="form-check-input" @bind-Value="selectedUser.IsAdmin"/>
                    <label class="form-check-label" for="isAdmin">Is Admin</label>
                </div>

                <button type="submit" class="btn btn-primary">Update Share</button>
            </EditForm>
        </div>
    }

    <div class="newTransaction backgroundBlock">
        <h4>Add new transaction</h4>
        <EditForm Model="@newTransaction" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>

            <div class="form-group">
                <label for="amount">Amount</label>
                <InputNumber id="amount" class="form-control" @bind-Value="newTransaction.Amount"/>
                <ValidationMessage For="@(() => newTransaction.Amount)"/>
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <InputText id="description" class="form-control" @bind-Value="newTransaction.Description"/>
                <ValidationMessage For="@(() => newTransaction.Description)"/>
            </div>
            <div class="form-group">
                <label for="date">Date</label>
                <InputDate id="date" class="form-control" @bind-Value="newTransaction.Date"/>
                <ValidationMessage For="@(() => newTransaction.Date)"/>
            </div>
            <div class="form-group">
                <label for="shareOption">Share Option</label>
                <InputSelect id="shareOption" class="form-control" @bind-Value="shareOption">
                    <option value="default">Group Shares</option>
                    <option value="equal">Equally</option>
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary">Add Transaction</button>
        </EditForm>
    </div>

    @if (IsGroupAdmin)
    {
        <div class="invites backgroundBlock">
            <CreateInvite GroupId="@group.Id"></CreateInvite>
        </div>
    }
</div>
<div class="backgroundBlock">
    <Transactions GroupId="@group.Id" IsGroupAdmin="IsGroupAdmin"></Transactions>
</div>

@code {
    [Parameter] public string groupId { get; set; }

    public Group group { get; set; }
    public bool IsGroupAdmin { get; set; }
    public bool showConfirmDelete { get; set; } = false;
    public GroupUser selectedUser { get; set; }

    [SupplyParameterFromForm] public Transaction newTransaction { get; set; }
    private string shareOption = "default";
    private Dictionary<int, decimal> customShares = new Dictionary<int, decimal>();
    private List<GroupService.UserTotalAmount> userTotalAmounts = new List<GroupService.UserTotalAmount>();

    protected override void OnInitialized()
    {
        newTransaction = new Transaction { Date = DateTime.Now };
        selectedUser = new GroupUser();
        try
        {
            group = groupService.GetGroupById(int.Parse(groupId));
            if (group == null)
            {
                navigationManager.NavigateTo("/error");
            }

            IsGroupAdmin = UserGroupAdmin().Result;
            userTotalAmounts = groupService.GetUserTotalAmounts(group.Id);
            InitializeCustomShares();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing component: {ex.Message}");
            navigationManager.NavigateTo("/error");
        }
    }

    private void InitializeCustomShares()
    {
        foreach (var groupUser in group.GroupUsers)
        {
            customShares[groupUser.UserId] = 0;
        }
    }

    private GroupService.UserTotalAmount GetUserTotalAmount(int userId)
    {
        return userTotalAmounts.FirstOrDefault(x => x.GroupUser.UserId == userId);
    }

    private void DeleteGroup()
    {
        try
        {
            groupService.DeleteGroup(group.Id);
            StateHasChanged();
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to delete group: {ex.Message}");
        }
    }

    private double GetSharePercentage(double share, Group group)
    {
        if (share == 0) return 0;
        return Math.Round(share / group.GroupUsers.Sum(gu => gu.Share) * 100, 2);
    }

    private async Task<bool> UserGroupAdmin()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        var groupUser = group.GroupUsers.FirstOrDefault(gu => gu.UserId == int.Parse(userId));
        return groupUser != null && groupUser.IsAdmin;
    }

    private int GetUserId()
    {
        var authState = authenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        return int.Parse(user.FindFirstValue(ClaimTypes.NameIdentifier));
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            if (shareOption == "equal")
            {
                decimal equalShare = Math.Round(newTransaction.Amount / group.GroupUsers.Count, 2);
                foreach (var groupUser in group.GroupUsers)
                {
                    customShares[groupUser.UserId] = equalShare;
                }
            }
            else if (shareOption == "default")
            {
                var totalShares = group.GroupUsers.Sum(x => x.Share);
                foreach (var groupUser in group.GroupUsers)
                {
                    var Amount = newTransaction.Amount * (decimal)groupUser.Share / (decimal)totalShares;
                    customShares[groupUser.UserId] = Amount;
                }
            }

            newTransaction.GroupId = group.Id;
            newTransaction.UserId = GetUserId();

            await transactionService.AddTransaction(newTransaction, customShares);
            StateHasChanged();
            navigationManager.NavigateTo($"/group/{group.Id}", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
    }

    private void UpdateSelectedUser(ChangeEventArgs e)
    {
        int selectedUserId = int.Parse(e.Value.ToString());
        var groupUser = group.GroupUsers.FirstOrDefault(gu => gu.UserId == selectedUserId);
        selectedUser.Share = groupUser.Share;
        selectedUser.IsAdmin = groupUser.IsAdmin;
    }

    private async Task UpdateShare()
    {
        try
        {
            var groupUser = group.GroupUsers.FirstOrDefault(gu => gu.UserId == selectedUser.UserId);
            if (groupUser != null)
            {
                groupUser.Share = selectedUser.Share;
                groupUser.IsAdmin = selectedUser.IsAdmin;
                groupService.UpdateGroupUser(groupUser);
                navigationManager.NavigateTo($"/group/{group.Id}", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating share: {ex.Message}");
        }
    }

}