@page "/groups"
@using System.Security.Claims
@using LunchSplitter.Domain.Entity
@using LunchSplitter.Services
@rendermode InteractiveServer
@inject GroupService groupService
@attribute [Authorize]
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager


<PageTitle>Groups</PageTitle>

<div>
    <h2>Groups</h2>
    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));">
        @foreach (var group in groupService.GetGroupsByUserId(GetUserId()))
        {
            <div style="border: solid #000000 1px; width: 200px; margin: 10px; padding: 10px; text-align: center;">
                <button @onclick="() => NavigateToGroup(group.Id)">Go to group</button>
                <h3>@group.Name</h3>
                <p>@group.GroupUsers.Count users</p>
            </div>
        }
    </div>
</div>

<div style="border: #000000">
    <h2>Create a new group</h2>
    <EditForm Model="NewGroup" OnSubmit="HandleSubmit" FormName="CreateGroup">
        <DataAnnotationsValidator/>

        <div>
            <label for="NameInput">Name</label>
            <InputText id="NameInput" @bind-Value="NewGroup.Name"/>
            <ValidationMessage For="@(() => NewGroup.Name)"/>
        </div>

        <button type="submit">Submit</button>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm] public Group NewGroup { get; set; }

    [CascadingParameter] public HttpContext? HttpContext { get; set; }

    protected override void OnInitialized() => NewGroup ??= new();

    private async void HandleSubmit()
    {
        groupService.AddGroup(NewGroup, GetUserId());

        NewGroup = new Group();
        await Task.Delay(2000);
        // reload page
        navigationManager.NavigateTo("/groups", true);
    }
    
    private void NavigateToGroup(int groupId)
    {
        navigationManager.NavigateTo($"/group/{groupId}");
    }
    
    private int GetUserId()
    {
        var authState = authenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        return int.Parse(user.FindFirstValue(ClaimTypes.NameIdentifier));
    }

}